<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>lsvra</title><description>When in doubt, delete it.</description><link>https://lsvra.com</link><language>en</language><lastBuildDate>Fri, 31 Jul 2020 23:40:36 +0100</lastBuildDate><pubDate>Fri, 31 Jul 2020 23:40:36 +0100</pubDate><ttl>250</ttl><atom:link href="https://lsvra.com/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://lsvra.com/posts/pihole-unbound-setup</guid><title>Straight from the horse's mouth: Setup your own recursive DNS resolver</title><description>A guide on how to transform your Pi-hole into an all-around DNS solution.</description><link>https://lsvra.com/posts/pihole-unbound-setup</link><pubDate>Fri, 31 Jul 2020 18:00:00 +0100</pubDate><content:encoded><![CDATA[<h1>Straight from the horse's mouth: Setup your own recursive DNS resolver</h1><p>This starts with the concept of digital footprint minimization.</p><p>I <strong>frequently delete my unused online accounts</strong>. More recently even ditched a <strong>popular data harvesting email provider</strong>. One of my tech mottos has always been <strong>to keep my privacy without sacrifice usability</strong>.</p><p>With that in mind, after <a href="https://lsvra.com/posts/pihole-vodafone-router/">my recent Pi-hole installation</a> I went on and started looking for something to use as a DNS resolver instead of Cloudflare.</p><p>And I came across with Unbound.</p><h2>What is Unbound?</h2><p>From their <a href="https://nlnetlabs.nl/projects/unbound/about/">website</a>:</p><blockquote><p>Unbound is a validating, recursive, caching DNS resolver. It is designed to be fast and lean and incorporates modern features based on open standards.</p></blockquote><p>Recursive domain name servers, transverse a given domain consulting the authoritative servers for each query. In short, the DNS resolver will recursively ask the servers responsible for each part of the way until it finds the path for a specific domain.</p><p>On top of this, Unbound, supports <a href="https://en.wikipedia.org/wiki/DNS_over_TLS">DoT</a>, <a href="https://en.wikipedia.org/wiki/Domain_Name_System_Security_Extensions">DNSSEC</a> and <a href="https://www.isc.org/blogs/qname-minimization-and-privacy/">Query Name Minimization</a>.</p><p>The code is also <a href="https://github.com/NLnetLabs/unbound">open source</a>, and it's nice to know that <a href="https://ostif.org/our-audit-of-unbound-dns-by-x41-d-sec-full-results/">was already been audited</a> at least once, in December 2019.</p><h2>What happens when you start using Unbound?</h2><p>Instead of forwarding the requests to the external upstream DNS servers, your Pi-hole will delegate the request to your own recursive DNS resolver.</p><p>For example:</p><ol><li>The recursive DNS resolver asks the DNS root servers: <strong>"Who is handling <a href="">.com</a>?‚Äù</strong></li><li>It receives the response of which TLD servers to ask next.</li><li>The recursive DNS resolver asks one of the TLD DNS servers: <strong>"Who is handling <a href="https://lsvra.com">lsvra.com</a>?"</strong></li><li>It receives the response with the authoritative name servers for <strong><a href="https://lsvra.com">lsvra.com</a></strong>.</li><li>The recursive DNS resolver asks the authoritative name servers for the IP address of <strong><a href="https://lsvra.com"> lsvra.com</a></strong>.</li><li>Finally, it receives the IP address, caches it and passes it to you.<ul></ul></li></ol><p>Since you are doing your own DNS recursive search instead of relying on a 3rd party service, you are the only to know the full path of the websites you visit. <strong>+1 for privacy! ü•á</strong></p><p>This recursive search can also be slower the first time you visit a given website, even though I cannot tell the difference in my daily use. Despite that, after a bit of use, the results start coming instantly from the <strong>local cache</strong>.</p><h2>How do I do set it up?</h2><p>It‚Äôs very easy to setup Unbound alongside your current Pi-hole installation.</p><p>After a little bit of research, I‚Äôve found that the Pi-hole documentation already does a very good job explaining how to set up Unbound. Their suggestions for the configuration file contain all the main tweaks you‚Äôll need. üëç</p><p>So, start by installing unbound with:</p><pre><code class="language-no-highlight">sudo apt install unbound
</code></pre><p>Then download the <strong>root hints file</strong>. This will be the the list of primary root servers which are serving the root domain.<br><br>You can update it <strong>once every six months</strong> or so. The file doesn't change very often.</p><pre><code class="language-no-highlight">wget -O root.hints https://www.internic.net/domain/named.root

sudo mv root.hints /var/lib/unbound/
</code></pre><p>Next, configure your Unbound installation.</p><pre><code class="language-no-highlight">sudo nano/etc/unbound/unbound.conf.d/pi-hole.conf
</code></pre><p>We'll use the recommended Pi-hole settings file, but you can still change it's values if needed (eg. turn on <strong>do-ip6</strong> if you have <strong>IPv6 connectivity</strong>).</p><pre><code class="language-no-highlight">server:
    # If no logfile is specified, syslog is used
    # logfile: "/var/log/unbound/unbound.log"
    verbosity: 0

    interface: 127.0.0.1
    port: 5335
    do-ip4: yes
    do-udp: yes
    do-tcp: yes

    # May be set to yes if you have IPv6 connectivity
    do-ip6: no

    # You want to leave this to no unless you have *native* IPv6. With 6to4 and
    # Terredo tunnels your web browser should favor IPv4 for the same reasons
    prefer-ip6: no

    # Use this only when you downloaded the list of primary root servers!
    root-hints: "/var/lib/unbound/root.hints"

    # Trust glue only if it is within the server's authority
    harden-glue: yes

    # Require DNSSEC data for trust-anchored zones, if such data is absent, the zone becomes BOGUS
    harden-dnssec-stripped: yes

    # Don't use Capitalization randomization as it known to cause DNSSEC issues sometimes
    # see https://discourse.pi-hole.net/t/unbound-stubby-or-dnscrypt-proxy/9378 for further details
    use-caps-for-id: no

    # Reduce EDNS reassembly buffer size.
    # Suggested by the unbound man page to reduce fragmentation reassembly problems
    edns-buffer-size: 1472

    # Perform prefetching of close to expired message cache entries
    # This only applies to domains that have been frequently queried
    prefetch: yes

    # One thread should be sufficient, can be increased on beefy machines. In reality for most users running on small networks or on a single machine, it should be unnecessary to seek performance enhancement by increasing num-threads above 1.
    num-threads: 1

    # Ensure kernel buffer is large enough to not lose messages in traffic spikes
    so-rcvbuf: 1m

    # Ensure privacy of local IP ranges
    private-address: 192.168.0.0/16
    private-address: 169.254.0.0/16
    private-address: 172.16.0.0/12
    private-address: 10.0.0.0/8
    private-address: fd00::/8
    private-address: fe80::/10

</code></pre><p>Save it by pressing <strong>Ctrl + X</strong> and accepting the changes.</p><p>Great! It‚Äôs almost done!</p><p>Now, start the service and check if your recursive server is operational:</p><pre><code class="language-no-highlight">sudo service unbound start

dig pi-hole.net @127.0.0.1 -p 5335
</code></pre><p>Then enter the following commands to test the <strong>DNSSEC</strong> validation.</p><p>This one should give you a <strong>SERVFAIL</strong> report (without an IP address).</p><pre><code class="language-no-highlight">dig sigfail.verteiltesysteme.net @127.0.0.1 -p 5335
</code></pre><p>This one should give you a <strong>NOERROR</strong> report (with an IP address).</p><pre><code class="language-no-highlight">dig sigok.verteiltesysteme.net @127.0.0.1 -p 5335
</code></pre><p>Finally, disable the current DNS server in your Pi-hole and enable the recursive one.</p><p>You can do this by filling the custom dns field with the value <strong>127.0.0.1#5335</strong> (as seen in the image):</p><img src="https://lsvra.com/images/posts/pihole-unbound-setup/pihole-unbound-setup-1.png" alt="Pi-hole settings page"/><h2>Last but not least.</h2><p><strong>DO NOT</strong> leave your installation exposed to the internet as it might be used in an <a href="https://www.cloudflare.com/learning/ddos/dns-amplification-ddos-attack/">DNS amplification attack</a>.</p><p>Below you can find a list of services you can use to check if everything is working as expected:</p><ul><li><strong><a href="https://internet.nl/connection/f4642d70e7ac41a0ac4db98c7abc165a/results#control-panel-5">Internet.nl</a></strong>: IPV6 &amp; DNSSEC Validation</li></ul><ul><li><strong><a href="https://www.rootcanary.org/test.html">Root Canary</a></strong>: DNSSEC Validation</li></ul><ul><li><strong><a href="https://canyouseeme.org">Can You See Me?</a></strong>: Open Ports Validation</li></ul><ul><li><strong><a href="https://www.shodan.io/search?query=A+black+hole+for+Internet+advertisements">Shodan</a></strong>: Open Resolver Validation</li></ul><ul><li><strong><a href="https://openresolver.com">Open Resolver</a></strong>: Open Resolver Validation</li></ul><p>Bye! üëã</p>]]></content:encoded></item><item><guid isPermaLink="true">https://lsvra.com/posts/pihole-vodafone-router</guid><title>Pi-hole &amp; Vodafone Router: Make them work together</title><description>A guide on how to setup your Pi-hole alongside Vodafone's Smart Router 2.0 (Huawei HG8247Q) and still keep your TV service functioning.</description><link>https://lsvra.com/posts/pihole-vodafone-router</link><pubDate>Tue, 23 Jun 2020 18:00:00 +0100</pubDate><content:encoded><![CDATA[<h1>Pi-hole &amp; Vodafone Router: Make them work together</h1><p>I'm always thinking about on how can I help the people around me to have more online privacy.</p><p>This can be challenging sometimes. People tend to have a lot of devices, and I don't want to constantly bother them with tech related tips &amp; tricks.</p><p>Recently, I've managed to take some time to figure out a way of adding a thin layer of security to my home network. So everyone who uses it, benefits from it.</p><p>The trick was to go directly to the source. <strong>The router</strong>.</p><h2>Meet Pi-hole</h2><p>Pi-hole acts as a DNS sink hole, intercepting the DNS requests before they leave your network and blocking the bad ones from actually being made.</p><p>Since it works at the DNS level, every device inside your home will be protected by it.</p><p>You can learn more about the project on <a href="https://pi-hole.net">their website</a>. For now, I invite you to try this with me. üë®‚Äçüíª</p><h2>Requirements</h2><p>In this tutorial I'll be using:</p><ul><li>A Raspberry Pi 3B+ (but you can use any model)</li><li>An ethernet cable (to make the connection between the Raspberry Pi and the router)</li><li>A 32GB MicroSD card</li><li>The MacOS Terminal app</li></ul><blockquote><p>If you use Windows, try <a href="https://www.putty.org">Putty</a> for the ssh connection and <a href="https://www.balena.io/etcher/">balenaEtcher</a> for the OS flashing part.</p></blockquote><h2>Setting up your Raspberry Pi</h2><p>Download and extract the latest Raspberry Pi OS Lite image from the <a href="https://www.raspberrypi.org/downloads/raspberry-pi-os/">official website</a>. Be sure you pick the <strong>Lite</strong> version. We won't need GUI for our Pi-hole build.</p><p>Insert an empty MicroSD card into your computer.</p><p>Open a terminal window inside the same folder of the Raspberry Pi OS image and run the following command:</p><pre><code class="language-no-highlight">diskutil list
</code></pre><p>This will give you the disks that are currently mounted on your computer.</p><p>Example (the MicroSD card is /dev/disk2 - your disk and partition list may vary):</p><pre><code class="language-no-highlight">‚ùØ diskutil list
/dev/disk0 (internal):
    #:                       TYPE NAME                    SIZE       IDENTIFIER
    0:                       GUID_partition_scheme        500.3 GB   disk0
    1:                       EFI EFI                      314.6 MB   disk0s1
    2:                       Apple_APFS Container disk1   500.0 GB   disk0s2

/dev/disk1 (synthesized):
    #:                       TYPE NAME                    SIZE       IDENTIFIER
    0:                       APFS Container Scheme -      +500.0 GB   disk1
                             Physical Store disk0s2
    1:                       APFS Volume Macintosh HD     89.6 GB    disk1s1
    2:                       APFS Volume Preboot          47.3 MB    disk1s2
    3:                       APFS Volume Recovery         510.4 MB   disk1s3
    4:                       APFS Volume VM               3.6 GB     disk1s4

/dev/disk2 (external, physical):
    #:                       TYPE NAME                    SIZE       IDENTIFIER
    0:                       FDisk_partition_scheme       *15.9 GB    disk2
    1:                       Windows_FAT_32 boot          268.4 MB   disk2s1
    2:                       Linux                        15.7 GB    disk2s2
</code></pre><p>Unmount the MicroSD card, replacing <strong>N</strong> with the correct number.</p><pre><code class="language-no-highlight">diskutil unmountDisk /dev/diskN
</code></pre><p>Then flash Raspberry Pi OS into it. Again, replace <strong>N</strong> with the disk number like you did before.</p><pre><code class="language-no-highlight">sudo dd bs=1m if=path_of_your_image.img of=/dev/rdiskN; sync
</code></pre><p>This can take a few minutes. Check the progress by pressing <strong>Ctrl + T</strong>.</p><p>After the <strong>dd</strong> command finishes, eject the MicroSD card (replacing <strong>N</strong> one more time).</p><pre><code class="language-no-highlight">sudo diskutil eject /dev/rdiskN
</code></pre><p>In order to have remote access to the Raspberry Pi after the installation, you'll need to setup <strong>ssh</strong> next.</p><p>The process is super easy. You will create an empty file named <strong><em>ssh</em></strong> at the root folder. The Raspberry Pi OS will check that file on boot and enable <strong>ssh</strong> for for us.</p><p>So, mount the MicroSD card again by removing and insert it back into the computer.</p><p>Then check the available volumes:</p><pre><code class="language-no-highlight">ls /Volumes
</code></pre><p>You will see your MicroSD card name (eg: <strong>boot</strong>). Use it to create the <strong>ssh</strong> file.</p><pre><code class="language-no-highlight">echo "" &gt; /Volumes/{your_card_name}/ssh
</code></pre><p>Congratulations! You now have a fully working Raspberry Pi OS build! üéâ</p><p>Please eject your MicroSD card and head over to the next segment.</p><h2>Setting up Pi-Hole</h2><p>Insert your MicroSD card into the Raspberry Pi.</p><p>Connect the Raspberry Pi to the router using an ethernet cable.</p><p>Turn on the Raspberry Pi.</p><p>Open a web browser window and type:</p><pre><code class="language-no-highlight">192.168.1.1
</code></pre><p>Then press <strong>enter</strong>. Your router's access page should be presented.</p><p>Look at the back of your router and use those credentials to log in.</p><img src="https://lsvra.com/images/posts/pihole-vodafone-router/pihole-vodafone-router-1.png" alt="Router access page"/><p>Once you got in, click on <strong>Wired Devices</strong>. You'll see the IP address attributed to the Raspberry Pi. This will be your <strong>ssh</strong> door from now on.</p><img src="https://lsvra.com/images/posts/pihole-vodafone-router/pihole-vodafone-router-2.png" alt="Router main page"/><p>You'll now access the Raspberry Pi through <strong>ssh</strong>. Open a terminal window and (using the Raspberry Pi IP address) run:</p><pre><code class="language-no-highlight">ssh pi@192.168.1.79
</code></pre><p>It will ask you for the <strong>ssh password</strong>. The default one is <strong>raspberry</strong>.</p><p>The first thing you'll need to do after the login, is to change the default password. Run:</p><pre><code class="language-no-highlight">raspi-config
</code></pre><p>This allows you, among other things, to change the default password for the Raspberry Pi. Feel free to explore the other options.</p><img src="https://lsvra.com/images/posts/pihole-vodafone-router/pihole-vodafone-router-3.png" alt="Raspi-config screen"/><p>Once the basic configuration is done, update and reboot the system.</p><pre><code class="language-no-highlight">sudo apt-get update
sudo apt-get upgrade
sudo reboot
</code></pre><p>Log in into your Raspberry Pi again (using the new password) and run Pi-hole's <strong>one step automated install</strong> command.</p><pre><code class="language-no-highlight">curl -sSL https://install.pi-hole.net | bash
</code></pre><p>To move around during the install phase use the <strong>tab</strong> and <strong>arrow keys</strong>. Press <strong>space</strong> to select the options and <strong>enter</strong> to proceed to the next step.</p><h4>Select the Upstream DNS Provider (eg: Cloudflare)</h4><img src="https://lsvra.com/images/posts/pihole-vodafone-router/pihole-vodafone-router-4.png" alt="Upstream DNS Provider screen"/><h4>Select the default Blocking Lists (default: All)</h4><img src="https://lsvra.com/images/posts/pihole-vodafone-router/pihole-vodafone-router-5.png" alt="Blocklists screen"/><h4>Select the network protocols (default: IPv4 &amp; IPv6)</h4><img src="https://lsvra.com/images/posts/pihole-vodafone-router/pihole-vodafone-router-6.png" alt="Network Protocols screen"/><h4>Confirm the IP addresses for the Raspberry Pi and Gateway (router)</h4><img src="https://lsvra.com/images/posts/pihole-vodafone-router/pihole-vodafone-router-7.png" alt="IP confirmation screen"/><h4>Install the web interface (default: ON)</h4><img src="https://lsvra.com/images/posts/pihole-vodafone-router/pihole-vodafone-router-8.png" alt="Web interface screen"/><h4>Install the web server (default: ON)</h4><img src="https://lsvra.com/images/posts/pihole-vodafone-router/pihole-vodafone-router-9.png" alt="Web server screen"/><h4>Activate query logging (default: ON)</h4><p>PS: I recommend turning this <strong>OFF</strong>. Explanations in the next step.</p><img src="https://lsvra.com/images/posts/pihole-vodafone-router/pihole-vodafone-router-10.png" alt="Query logging screen"/><h4>Choose your Privacy Mode (default: Show Everything)</h4><p>PS: I recommend your choose the Anonymous Mode (3) to protect the privacy of everyone. Doing so, you will not be able to see which domains are the users accessing. But also, <strong>why should you?</strong> ü§î</p><img src="https://lsvra.com/images/posts/pihole-vodafone-router/pihole-vodafone-router-11.png" alt="Privacy Mode screen"/><p>Last but not least, <strong>save the admin webpage login password</strong>. This will be your key to the Pi-hole's web interface.</p><img src="https://lsvra.com/images/posts/pihole-vodafone-router/pihole-vodafone-router-12.png" alt=""/><p>Alright! You have successfully installed Pi-hole on your Raspberry Pi. Let's put it to work! üöÄ</p><h2>Configuring Pi-Hole</h2><p>Using your current <strong>ssh</strong> terminal session, lets edit <strong>dhcpcd.conf</strong> file by running:</p><pre><code class="language-no-highlight">sudo nano /etc/dhcpcd.conf
</code></pre><p>Change the file's last few lines in order to look like this (the static ip address should be the same as your Raspberry Pi + the /24 suffix):</p><pre><code class="language-no-highlight">interface eth0
    static ip_address=192.168.1.79/24
    static routers=192.168.1.1
    static domain_name_servers=127.0.0.1
</code></pre><p>Save it by pressing <strong>Ctrl + X</strong> and accepting the changes.</p><p>Once again, reboot the Raspberry Pi.</p><pre><code class="language-no-highlight">sudo reboot
</code></pre><blockquote><p>The next steps will halt your internet/tv connection for a few minutes. If you find yourself stuck, just undo the changes.</p></blockquote><p>Open your <a href="http://192.168.1.1">router access page</a> again and <strong>disable</strong> the DHCP and DHCPv6 servers. You'll be using Pi-hole from now on.</p><img src="https://lsvra.com/images/posts/pihole-vodafone-router/pihole-vodafone-router-13.png" alt="Router DHCP screen"/><img src="https://lsvra.com/images/posts/pihole-vodafone-router/pihole-vodafone-router-14.png" alt="Router DHCPv6 screen"/><p>Open Pi-hole's web interface in your web browser (using your Raspberry Pi IP address).</p><pre><code class="language-no-highlight">192.168.1.79/admin
</code></pre><p>Log in using the admin password you got at the end of the Pi-hole installation.</p><p>Turn on the DCHP server by enabling the following boxes and set the range between <strong><em>192.168.1.64</em></strong> and <strong><em>192.168.1.251</em></strong>. Don't forget to press the <strong>Save</strong> button.</p><img src="https://lsvra.com/images/posts/pihole-vodafone-router/pihole-vodafone-router-15.png" alt="Pi-hole DCHP settings screen"/><p>Enable the IPv6 Upstream DNS Servers as well.</p><img src="https://lsvra.com/images/posts/pihole-vodafone-router/pihole-vodafone-router-16.png" alt="Pi-hole Upstream DNS settings screen"/><p>Your network should now be working again. But not your TV connection.</p><h2>Re-enabling the TV connection</h2><blockquote><p>Without this step you won't be able to watch TV since the IPTV service needs to access Vodafone's own DNS servers.</p></blockquote><p>You'll need to write down the MAC address of the TV Box. You can find it in the <strong>bottom of the device</strong> itself or under <strong>Wired Devices</strong> by accessing your router access page.</p><p>The MAC address should be something like this:</p><pre><code class="language-no-highlight"> aa:bb:cc:dd:ee:ff
</code></pre><p>In your <strong>ssh</strong> terminal window, run the following command:</p><pre><code class="language-no-highlight">sudo nano /etc/dnsmasq.d/03-vodafone.conf
</code></pre><p>Now, add the following text to the created file (change the MAC address by the one you wrote down):</p><pre><code class="language-no-highlight">dhcp-host=aa:bb:cc:dd:ee:ff,set:vodafone
dhcp-option=tag:vodafone,option:dns-server,192.168.1.1
</code></pre><p>Save the file by pressing <strong>Ctrl + X</strong> and accepting the changes.</p><p>You can check if the file was successfully created by running:</p><pre><code class="language-no-highlight">ls /etc/dnsmasq.d
</code></pre><p>Finally, reboot the system.</p><pre><code class="language-no-highlight">sudo reboot
</code></pre><p>Reboot your TV Box.</p><p>You just created a bypass for the TV service to work under the same rules as defined by Vodafone.</p><h2>Final Tips</h2><p>Feel free to tweak the remaining Pi-hole settings as you wish.</p><p>I recommend you to add more blocklists to the Pi-hole, specially <strong>one specific for your home country</strong>. Just do a web search, there are great sources available.</p><blockquote><p>Keep in mind that Pi-hole uses a specific type of list. You cannot use the same lists that common adblockers do.</p></blockquote><p>Bye! üëã</p>]]></content:encoded></item></channel></rss>